upsertLetter:
INSERT INTO letter (id, sender, recipient, body, created, lastModified) VALUES (
    :id,
    :sender,
    :recipient,
    :body,
    :created,
    :lastModified
);

tagLetterWithCategory:
INSERT INTO letterToCategory (letterId, categoryId) VALUES (
    :letterId,
    :categoryId
);

tagLetterWithReminder:
INSERT INTO letterToReminder (letterId, reminderId) VALUES (
    :letterId,
    :reminderId
);

letterInfo:
SELECT
    letter.id,
    letter.sender,
    letter.recipient,
    letter.body,
    letter.created,
    letter.lastModified,
    GROUP_CONCAT(category.color) AS categoryColors
FROM letter
LEFT JOIN letterToCategory ON letter.id = letterToCategory.letterId
LEFT JOIN category ON letterToCategory.categoryId = category.id
WHERE letter.id = :letterId
GROUP BY letter.id;

letterDetail:
SELECT
    letter.id,
    letter.sender,
    letter.recipient,
    letter.body,
    letter.created,
    letter.lastModified,
    GROUP_CONCAT(document.id) AS documentIds,
    GROUP_CONCAT(letterToCategory.categoryId) AS categoryIds
FROM letter
LEFT JOIN document ON letter.id = document.letterId
LEFT JOIN letterToCategory ON letter.id = letterToCategory.letterId
WHERE letter.id = :letterId
GROUP BY letter.id;

hasLetters:
SELECT CASE
    WHEN COUNT(*) > 0 THEN 1
    ELSE 0
END AS hasLetters
FROM letter;

letterList:
SELECT id
FROM (
    WITH FilteredLetters AS (
        SELECT DISTINCT l.id, l.created
        FROM letter l
        LEFT JOIN letterToCategory ltc ON l.id = ltc.letterId
        WHERE (ltc.categoryId = :categoryId OR :categoryId IS NULL)
    )
    SELECT fl.id
    FROM FilteredLetters fl
    ORDER BY fl.created DESC
    LIMIT :limit
);

search:
SELECT id
FROM (
    WITH FilteredLetters AS (
        SELECT DISTINCT l.id
        FROM letter l
        LEFT JOIN letterToCategory ltc ON l.id = ltc.letterId
        WHERE (ltc.categoryId = :categoryId OR :categoryId IS NULL)
    )
    SELECT fl.id
    FROM FilteredLetters fl
    JOIN letterFTS l ON fl.id = l.id
    WHERE letterFTS MATCH :query
    ORDER BY bm25(letterFTS)
    LIMIT :limit
);
