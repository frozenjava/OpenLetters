upsertLetter:
INSERT INTO letter (id, sender, recipient, body, created, lastModified) VALUES (
    :id,
    :sender,
    :recipient,
    :body,
    :created,
    :lastModified
) ON CONFLICT (id) DO UPDATE SET
    sender = excluded.sender,
    recipient = excluded.recipient,
    body = excluded.body,
    lastModified = excluded.lastModified;

deleteLetter:
DELETE FROM letter WHERE id = :letterId;

tagLetterWithCategory:
INSERT INTO letterToCategory (letterId, categoryId) VALUES (
    :letterId,
    :categoryId
);

untagCategoryFromLetter:
DELETE FROM letterToCategory WHERE letterId = :letterId AND categoryId = :categoryId;

tagLetterWithReminder:
INSERT INTO letterToReminder (letterId, reminderId) VALUES (
    :letterId,
    :reminderId
);

categoriesForLetter:
SELECT categoryId FROM letterToCategory WHERE letterId = :letterId;

categoryColorsForLetter:
SELECT category.color FROM letterToCategory AS ltc
INNER JOIN category AS category ON ltc.categoryId = category.id
WHERE ltc.letterId = :letterId
ORDER BY category.priority ASC, label ASC;

letterInfo:
SELECT
    letter.id,
    letter.sender,
    letter.recipient,
    letter.body,
    letter.created,
    letter.lastModified,
    GROUP_CONCAT(category.color) AS categoryColors
FROM letter
LEFT JOIN letterToCategory ON letter.id = letterToCategory.letterId
LEFT JOIN category ON letterToCategory.categoryId = category.id
WHERE letter.id = :letterId
GROUP BY letter.id;

letterDetail:
SELECT
    letter.id,
    letter.sender,
    letter.recipient,
    letter.body,
    letter.created,
    letter.lastModified,
    GROUP_CONCAT(document.id) AS documentIds,
    GROUP_CONCAT(letterToCategory.categoryId) AS categoryIds
FROM letter
LEFT JOIN document ON letter.id = document.letterId
LEFT JOIN letterToCategory ON letter.id = letterToCategory.letterId
WHERE letter.id = :letterId
GROUP BY letter.id;

hasLetters:
SELECT CASE
    WHEN COUNT(*) > 0 THEN 1
    ELSE 0
END AS hasLetters
FROM letter;

letterList:
SELECT l.id FROM letter l
    LEFT JOIN letterToCategory ltc ON l.id = ltc.letterId
    WHERE (ltc.categoryId = :categoryId OR :categoryId IS NULL)
GROUP BY l.id
ORDER BY MAX(l.created) DESC
LIMIT :limit;

searchSenders:
SELECT DISTINCT sender FROM letterFTS
WHERE letterFTS MATCH 'sender:' || :query
ORDER BY bm25(letterFTS)
LIMIT 5;

searchRecipients:
SELECT DISTINCT recipient FROM letterFTS
WHERE letterFTS MATCH 'recipient:' || :query
ORDER BY bm25(letterFTS)
LIMIT 5;

search:
SELECT id
FROM (
    WITH FilteredLetters AS (
        SELECT DISTINCT l.id
        FROM letter l
        LEFT JOIN letterToCategory ltc ON l.id = ltc.letterId
        WHERE (ltc.categoryId = :categoryId OR :categoryId IS NULL)
    )
    SELECT fl.id
    FROM FilteredLetters fl
    JOIN letterFTS l ON fl.id = l.id
    WHERE letterFTS MATCH :query
    ORDER BY bm25(letterFTS)
    LIMIT :limit
);
